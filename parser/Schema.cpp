#include "Schema.hpp"

#include <sstream>
#include <algorithm>

static std::string type(const Schema::Relation::Attribute& attr) {
    Types::Tag type = attr.type;
    switch (type) {
    case Types::Tag::Integer:
        return "Integer";
    case Types::Tag::Timestamp:
        return "Timestamp";
    case Types::Tag::Numeric: {
        std::stringstream ss;
        ss << "Numeric(" << attr.len1 << ", " << attr.len2 << ")";
        return ss.str();
    }
    case Types::Tag::Char: {
        std::stringstream ss;
        ss << "Char(" << attr.len1 << ")";
        return ss.str();
    }
    }
    throw;
}

static std::string cppType(const Schema::Relation::Attribute& attr) {
    Types::Tag type = attr.type;
    switch (type) {
    case Types::Tag::Integer:
        return "Integer";
    case Types::Tag::Timestamp:
        return "Timestamp";
    case Types::Tag::Numeric: {
        std::stringstream ss;
        ss << "Numeric<" << attr.len1 << ", " << attr.len2 << ">";
        return ss.str();
    }
    case Types::Tag::Char: {
        std::stringstream ss;
        ss << "Char<" << attr.len1 << ">";
        return ss.str();
    }
    }
    throw;
}

static std::string toCppName(const std::string& name) {
    std::string res;
    // TODO strip "
    if (name[0] == '\"' && name[name.size() - 1] == '\"') {
        res = name.substr(1, name.size() - 2);
    } else {
        res = name;
    }
    return res;
}

std::string Schema::toString() const {
    std::stringstream out;
    for (const Schema::Relation& rel : relations) {
        out << toCppName(rel.name) << std::endl;
        out << "\tPrimary Key:";
        for (unsigned keyId : rel.primaryKey)
            out << ' ' << rel.attributes[keyId].name;
        out << "\n\tIndices:\n";
        for (auto& index : rel.indices) {
            out << "\t\t" << index.name << " on";
            for (auto& fieldId : index.keys) {
                out << ' ' << rel.attributes[fieldId].name;
            }
            out << '\n';
        }
        out << std::endl;
        for (const auto& attr : rel.attributes)
            out << '\t' << attr.name << '\t' << type(attr) << (attr.notNull ? " not null" : "") << std::endl;
    }
    return out.str();
}

std::string Schema::toCpp() const {
    std::stringstream out;
    out << "#pragma once\n"
        << "/********************************************************************************\n"
        << " * THIS IS AN AUTOGENERATED FILE! DO NOT CHANGE OR MODIFY                       *\n"
        << " *******************************************************************************/\n"
        << "#include <fstream>\n"
        << "#include <sstream>\n"
        << "#include <tuple>\n"
        << "#include <unordered_map>\n"
        << "#include <vector>\n"
        << "#include \"hashfunctions.h\"\n"
        << "#include \"Types.h\"\n"
        << "\n"
        << "struct Database {\n"
        << "    static Database& instance() {\n"
        << "        static Database instance;\n"
        << "        return instance;\n"
        << "    }\n"
        << "    void importDatabaseFromPath(const std::string&& path) {\n"
        << "        importDatabaseFromPath(path);\n"
        << "    }\n"
        << "\n"
        << "    void importDatabaseFromPath(const std::string& path) {\n";
    for (const auto& rel : relations) {
        out << "        readTableFromFile(" << toCppName(rel.name) << ", path + \"tpcc_" << toCppName(rel.name) << ".tbl\");\n";
    }
    out << "    }\n"
        << "private:\n"
        << "    Database() {};\n"
        << "    Database(const Database&) = delete;\n"
        << "    Database& operator = (const Database&) = delete;\n"
        << "\n"
        << "    template<typename T>\n"
        << "    static void readElement(std::istream& stream, T& field, char delim = '|') {\n"
        << "        std::string tmp;\n"
        << "        getline(stream, tmp, delim);\n"
        << "        field = T::castString(tmp.c_str(), tmp.length());\n"
        << "    }\n\n";
    for (const auto& rel : relations) {
        out << "    struct " << toCppName(rel.name) << " {\n"
            << "        friend struct Database;\n";
        // Attributes
        for (const auto& attr : rel.attributes) {
            out << "        std::vector<" << cppType(attr)  << "> " << attr.name << ";\n";
        }
        out << "        size_t size = 0;\n";

        const bool hasPrimaryKey = rel.primaryKey.size() > 0;
        // Primary Key
        if (hasPrimaryKey) {
            out << "\n        using KeyType = std::tuple<";
            std::for_each(rel.primaryKey.begin(), rel.primaryKey.end() - 1, [&](unsigned keyId) {
                out << cppType(rel.attributes[keyId]) << ", ";
            });
            out << cppType(rel.attributes[rel.primaryKey.back()]) << ">;\n";
        }

        out << "\n        struct Row {\n";
        for (const auto& attr : rel.attributes) {
            out << "            " << cppType(attr)  << " " << attr.name << ";\n";
        }
        if (hasPrimaryKey) {
            out << '\n'
                << "            KeyType getKey() const {\n"
                << "                return {";

            std::for_each(rel.primaryKey.begin(), rel.primaryKey.end() - 1, [&](unsigned keyId) {
                out << rel.attributes[keyId].name << ", ";
            });
            out << rel.attributes[rel.primaryKey.back()].name << "};\n"
                << "            }\n";
        }
        out << "        };\n"
            << '\n';
        if (hasPrimaryKey) {
            out << "        std::unordered_map<KeyType, size_t> primaryIndex;\n";
            out << '\n';
        }
        out << "        Row getRow(size_t i) {\n";
        out << "            return {";
        std::for_each(rel.attributes.begin(), rel.attributes.end() - 1, [&](const Schema::Relation::Attribute & attr) {
            out << "" << attr.name << "[i], ";
        });
        out << rel.attributes.back().name << "[i]};\n"
            << "        }\n";
        if (hasPrimaryKey) {
            out << "        Row getRowForKey(const KeyType& key) {\n"
                << "            return getRow(primaryIndex[key]);\n"
                << "        }\n"
                << "\n"
                << "        KeyType getKey(size_t i) {\n"
                << "            return getRow(i).getKey();\n"
                << "        }\n"
                << "\n";
        }
        out << "        void insert(const Row&& elem) {\n";
        for (const auto& attr : rel.attributes) {
            out << "            " << attr.name  << ".push_back(elem." << attr.name << ");\n";
        }
        if (hasPrimaryKey) {
            out << "            const auto key = elem.getKey();\n"
                << "            primaryIndex[key] = size;\n";
        }
        out << "            size++;\n"
            << "        }\n"
            << "\n";
        if (hasPrimaryKey) {
            out << "        void update(const Row& elem) {\n"
                << "            const auto i = primaryIndex[elem.getKey()];\n";
            for (const auto& attr : rel.attributes) {
                out << "            " << attr.name  << "[i] = elem." << attr.name << ";\n";
            }
            out << "        }\n"
                << "\n";
        }
        out << "        static Row read(std::string& line) {\n"
            << "            auto fileStream = std::stringstream(line);\n"
            << "            auto tmp = Row {};\n";
        std::for_each(rel.attributes.begin(), rel.attributes.end() - 1, [&](const Schema::Relation::Attribute & attr) {
            out << "            readElement(fileStream, tmp." << attr.name << ");\n";
        });
        out << "            readElement(fileStream, tmp." << rel.attributes.back().name << ", '\\n');\n"
            << "            return tmp;\n"
            << "        }\n";

        /*
        out << "\n    Indices:\n";
        for (auto& index : rel.indices) {
            out << "        " << index.name << " on";
            for(auto& fieldId : index.keys) {
                out << ' ' << rel.attributes[fieldId].name;
            }
            out << '\n';
        }
        */
        out << "    };\n\n";
    }
    out << "    template<typename T>\n"
        << "    void readTableFromFile(T& table, std::string name) {\n"
        << "        auto fileStream = std::ifstream {};\n"
        << "        fileStream.open(name);\n"
        << "        if (!fileStream.is_open()) {\n"
        << "            throw \"no file found\";\n"
        << "        }\n"
        << "        for (std::string line; std::getline(fileStream, line, '\\n');) {\n"
        << "            table.insert(T::read(line));\n"
        << "        }\n"
        << "        fileStream.close();\n"
        << "    }\n"
        << "public:\n";
    for (const auto& rel : relations) {
        out << "    " << toCppName(rel.name) << " " << toCppName(rel.name) << ";\n";
    }
    out << "};" << std::endl;

    return out.str();
}

